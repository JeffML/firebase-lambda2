

type Opening {
  fen: String! @unique
  SCID: String!
  desc: String!
}

type Game {
  header: Header! 
  fens: [String!]!
  opening: Opening @relation
}

type Header {
    Event: String
    Date: String!
    White: String!
    WhiteElo: String
    Black: String!
    BlackElo: String
    ECO: String
    Result: String
}

type Query {
  allGames: [Game]
  allOpenings: [Opening]
}

input HeaderInput {
    Event: String
    Date: String!
    White: String!
    WhiteElo: String
    Black: String!
    BlackElo: String
    ECO: String
    Result: String
}

input OpeningInput {
  fen: String!
  SCID: String!
  desc: String!
}

input GameInput {
  header: HeaderInput! 
  fens: [String!]!
  opening: OpeningInput @relation
}

type Mutation {
  addOpenings(openings: [OpeningInput]) : [Opening]! @resolver(name: "add_openings2" paginated:false)
  addGames(games: [GameInput]) : [Game]! @resolver(name: "add_games", paginated: false)
}